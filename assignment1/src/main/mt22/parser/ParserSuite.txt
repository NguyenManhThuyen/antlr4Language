# import unittest
# from TestUtils import TestParser


# class ParserSuite(unittest.TestCase):
#     def test_simple_program(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 201))

#     def test_nested_functions(self):
#         input = """outer: function void () {
#             x: integer = 10;
#             inner: function void() {
#                 y: integer = 20;
#                 print(x + y);
#             }
#             inner();
#         }"""
#         expect = "Error on line 3 col 19: function"
#         self.assertTrue(TestParser.test(input, expect, 202))

#     def test_function_declaration(self):
#         input = """func: function void (a: integer, b: float, c: boolean) {
#             x: integer;
#             y: float = 3.14;
#             z: boolean = true;
#             if (c && b > 0) {
#                 x = a + y;
#             }
#             else {
#                 x = a - y;
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 203))

#     def test_function_with_array_parameter(self):
#         input = """swap: function void (arr: array[5] of integer, i: integer, j: integer) {
#             temp: integer;
#             temp = arr[i];
#             arr[i] = arr[j];
#             arr[j] = temp;
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 204))

#     def test_simple_short_variable_declaration(self):
#         input = """x: integer;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 205))

#     def test_simple_full_variable_declaration(self):
#         input = """x: integer = 5;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 206))

#     def test_multi_full_variable_declaration(self):
#         input = """x, y, z: integer = 1, 2, 3;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 207))

#     def test_error_multi_full_variable_declaration(self):
#         input = """x, y, z: integer = 1, 2, 3, 6, 3;"""
#         expect = "Error on line 1 col 26: ,"
#         self.assertTrue(TestParser.test(input, expect, 208))

#     def test_simple_function_declaration(self):
#         input = """foo: function integer (){ }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 209))

#     def test_function_declaration_with_return(self):
#         input = """foo: function void (x: integer, y: float) { }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 210))

#     def test_function_declaration_with_return(self):
#         input = """foo:function integer(x: integer, y: float) {
#                 z: integer;
#                 z = x + y;
#                 return z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 211))

#     def test_multi_function_declaration(self):
#         input = """ foo: function integer(x: integer){ }
#                     bar: function float(y: float){ }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 212))

#     def test_multi_function_declaration_and_bodies(self):
#         input = """foo: function integer(x: integer) {
#                 z: integer;
#                 z = x + 1;
#                 return z;
#             }
#             bar: function float(y: float) {
#                 z: float;
#                 z = y * 2.0;
#                 return z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 213))

#     def test_missing_semicolon_after_function_declaration(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3)
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 11 col 12: inc"
#         self.assertTrue(TestParser.test(input, expect, 214))

#     def test_missing_semicolon_after_function_parameter_list(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta)
#             delta = delta / 4;
#         }"""
#         expect = "Error on line 12 col 12: delta"
#         self.assertTrue(TestParser.test(input, expect, 215))

#     def test_missing_semi_function_body(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 4 col 12: else"
#         self.assertTrue(TestParser.test(input, expect, 216))

#     def test_program_multi_function(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         main: function void() {
#             foo();
#             bar();
#             baz();
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 217))

#     def test_program_single_line(self):
#         input = """x: integer = 10; // This is x
#         y: integer = 20; // This is y
#         z: integer = 30; // This is z
#         main: function void() {
#             // This is a comment
#             foo(); // Call foo
#             bar(); // Call bar
#             baz(); // Call baz
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 218))

#     def test_program_single_line(self):
#         input = """/* This is a block comment
#         This is a multiline comment */
#         x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         /* This is another comment */
#         main: function void() {
#             foo();
#             bar();
#             baz();
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 219))

#     def test_error_program_single_line(self):
#         input = """/* This is a block comment
#         This is a multiline comment */
#         x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         /* This is another comment */ */
#         main: function void() {
#             foo();
#             bar();
#             baz();
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "Error on line 6 col 38: *"
#         self.assertTrue(TestParser.test(input, expect, 220))

#     def test_error_program_string(self):
#         input = """x: boolean = true;
#         y: boolean = false;
#         z: boolean = (x == y);
#         main: function void() {
#             if (x) {
#                 print("x is true");
#             } else {
#                 print("x is false");
#             }
#             if (y) {
#                 print("y is true");
#             } else {
#                 print("y is false");
#             }
#             if (z) {
#                 print("z is true");
#             } else {
#                 print("z is false");
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 221))

#     def test_error_program_single_line(self):
#         input = """x: string = "Hello";
#         y: string = "World";
#         z: string = x + y;
#         main: function void() {
#             print(z);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 222))

#     def test_error_program_if_statement(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         main: function void() {
#             if (x > y) {
#                 print("x is greater than y");
#             } else {
#                 print("x is less than or equal to y");
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 223))

#     def test_invalid_main_function_declaration(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 9 col 12: ("
#         self.assertTrue(TestParser.test(input, expect, 224))

#     def test_invalid_variable_declaration(self):
#         input = """x integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 1 col 2: integer"
#         self.assertTrue(TestParser.test(input, expect, 225))

#     def test_invalid_function_declaration(self):
#         input = """x: integer = 65;
#         fact: function integer (n integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 2 col 34: integer"
#         self.assertTrue(TestParser.test(input, expect, 226))

#     def test_invalid_expression(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x))
#         }"""
#         expect = "Error on line 12 col 27: )"
#         self.assertTrue(TestParser.test(input, expect, 227))

#     def test_invalid_expression(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1)
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 5 col 8: }"
#         self.assertTrue(TestParser.test(input, expect, 228))

#     def test_nested_if_else_statement(self):
#         input = """max:function integer(a: integer, b:integer, c:integer) {
#             if (a > b) {
#                 if (a > c) {
#                     return a;
#                 } else {
#                     return c;
#                 }
#             } else {
#                 if (b > c) {
#                     return b;
#                 } else {
#                     return c;
#                 }
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 229))

#     def test_nested_loop_break_statement(self):
#         input = """printMultiples: function void (n: integer) {
#         for (i = 1, i <= 10, i + 1) {
#         if (i * n > 100) {
#             break;
#         }
#          print(i * n);
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 230))

#     def test_while_continue_statement(self):
#         input = """printOddNumbers:function void(n: integer) {
#             i = 1;
#             while (i <= n) {
#                 if (i % 2 == 0) {
#                     i = i + 1;
#                     continue;
#                 }
#                 print(i);
#                 i = i + 1;
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 231))

#     def test_array_declaration(self):
#         input = """sumArray:function integer(arr: array[3] of integer, n: integer) {
#         sum = 0;
#             for (i = 0, i < n,i + 1) {
#         sum = sum + arr[i];
#             }
#             return sum;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 232))

#     def test_boolean_expression(self):
#         input = """isEven:function boolean(n: integer) {
#             return (n % 2 == 0) && (n > 0);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 233))

#     def test_swap_function(self):
#         input = """swap: function void(a: integer,  b:integer) {
#             temp = a;
#             a = b;
#             b = temp;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 234))

#     def test_multiple_func_definitions_and_operations(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         foo: function integer (a: integer, b: integer, c: integer) {
#             return a + b * c;
#         }
#         bar: function integer (n: integer) {
#             return foo(x, y, z) + n;
#         }
#         main: function void() {
#             printIntLn(bar(5));
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 235))

#     def test_mul_func_and_boolean_exprs(self):
#         input = """foo: function boolean (a: boolean, b: boolean) {
#             return (a || b) && (! a || b);
#         }
#         bar: function boolean (n: integer) {
#             return (n > 0) && (n < 10);
#         }
#         main: function void() {
#             printBoolLn(foo(true, false) || bar(5));
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 236))

#     def test_nested_func_calls_and_complex_exprs(self):
#         input = """x: integer = 5;
#         y: integer = 10;
#         foo: function integer (a: integer, b: integer) {
#             return a + b * (a - b);
#         }
#         bar: function boolean (n: integer) {
#             return (n > 0) && (n < 10);
#         }
#         main: function void() {
#             z: integer = foo(x + y, y - x) * 2 - 5;
#             printIntLn(z);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 237))

#     def test_if_else_stmts_and_bool_exprs(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         foo: function integer (a: integer, b: integer) {
#             if (a > b) return a;
#             else return b;
#         }
#         bar: function boolean (n: integer) {
#             return (n >= x) && (n <= z);
#         }
#         main: function void() {
#             if (bar(y)) print("y is in range");
#             else print("y is out of range");
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 238))

#     def test_error_exist_func_in_program(self):
#         input = """x: integer = 4;
#         while (x <= 10) {
#             sum = sum + x * 2;
#             x = x + 1;
#         }
#         printIntLn(sum);
#         """
#         expect = "Error on line 2 col 8: while"
#         self.assertTrue(TestParser.test(input, expect, 239))

#     def test_multi_variable_assignment(self):
#         input = """a: integer = 5;
#             b, c: float = 2.5, 3.2;
#             d, e, f: boolean = true, false, true;
#             g: string = "hello";
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 240))

#     def test_if_else_function(self):
#         input = """a, b, c: integer = 5, 10, 15;
#                 main: function void (a:integer, b:integer, c: integer){
#                     if ((a < b) && (b < c))
#                     print("b is in the middle");
#                 else
#                     print("b is not in the middle");
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 241))

#     def test_complex_30(self):
#         input = """ a, b, c: integer;
#                 func: function void() {
#                     a = 0;
#                     b = 1;
#                     while (b < 100){
#                         c = a + b;
#                         a = b;
#                         b = c;
#                         }
#                     writeInt(c);
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 242))

#     def test_complex_32(self):
#         input = """a: array[5] of integer = {1, 2, 3, 4, 5};
#                 func: function integer(low: integer, high: integer) {
#                     if ((low < 0) || (high < 0) || (low >= 5) || (high >= 5))
#                         return -1;

#                     sum = 0;
#                     for (i = low, i <= high, i+1)
#                         sum = sum + a[i];
#                     return sum;
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 243))

#     def test_complex_30(self):
#         input = """func: function integer(n: integer) {
#                     if (n <= 1) {
#                         return 1;
#                     } else {
#                         return func(n - 1) + func(n - 2);
#                     }
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 244))

#     def test_complex_31(self):
#         input = """func: function integer(n: integer) {
#                     i = 1;
#                     sum = 0;
#                     while (i <= n) {
#                         sum = sum + i;
#                         i = i + 1;
#                     }
#                     return sum;
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 245))

#     def test_complex_32(self):
#         input = """func: function integer(n: integer) {
#                     i = 1;
#                     product = 1;
#                     while (i <= n) {
#                         product = product * i;
#                         i = i + 1;
#                     }
#                     return product;
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 246))

#     def test_complex_33(self):
#         input = """func: function integer(a: integer, b: integer) {
#                     result = 0;
#                     for (i = a, i <= b, i + 1) {
#                         result = result + i;
#                     }
#                     return result;
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 247))

#     def test_complex_34(self):
#         input = """func: function integer(a: integer, b: integer) {
#                     result = 1;
#                     for (i = a, i <= b, i + 1) {
#                         result = result * i;
#                     }
#                     return result;
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 248))

#     def test_complex_26(self):
#         input = """func: function void() {
#             a = 2;
#             b = 3;
#             if (a > b) {
#                 writeString("a is greater than b");
#             } else if (a < b) {
#                 writeString("a is less than b");
#             } else {
#                 writeString("a is equal to b");
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 249))

#     def test_complex_27(self):
#         input = """func: function void() {
#             i = 0;
#             while (i < 10) {
#                 if (i == 5) {
#                     break;
#                 }
#                 writeInt(i);
#                 i = i + 1;
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 250))

#     def test_complex_28(self):
#         input = """func: function void() {
#             i = 0;
#             while (i < 10) {
#                 if (i % 2 == 0) {
#                     i = i + 1;
#                     continue;
#                 }
#                 writeInt(i);
#                 i = i + 1;
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 251))

#     def test_complex_29(self):
#         input = """func: function integer(a: integer, b: integer) {
#             if (a == 0) {
#                 return b;
#             }
#             while (b != 0) {
#                 if (a > b) {
#                     a = a - b;
#                 } else {
#                     b = b - a;
#                 }
#             }
#             return a;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 252))

#     def test_complex_30(self):
#         input = """a: array[10] of integer;
#                    i: integer;
#         func: function void() {
#             for (i = 0, i < 10, i + 1) {
#                 a[i] = i * i;
#             }
#             for (i = 0, i < 10, i + 1) {
#                 writeIntLn(a[i]);
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 253))

#     def test_complex_32(self):
#         input = """x: array[2,2] of integer= {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
#         func: function void() {
#             for (i = 0, i < 3,i + 1) {
#                 for (j = 0, j < 3,j + 1) {
#                     writeInt(x[i][j]);
#                 }
#                 writeLn();
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 254))

#     def test_complex_26(self):
#         input = """func: function integer(a: integer, b: integer) {
#                 for (i = 0, i < 10, 2) {
#                     a = a + b;
#                 }
#                 return a;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 254))

#     def test_complex_27(self):
#         input = """func: function void() {
#                 x = 1.0e-10;
#                 if (x != 0) {
#                     x = 1 / x;
#                 }
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 255))

#     def test_complex_29(self):
#         input = """func: function void() {
#                 x = a && b && c || d;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 256))

#     def test_complex_30(self):
#         input = """func: function integer(n: integer) {
#                 if (n == 0 || n == 1) {
#                     return n;
#                 }
#                 return fibonacci(n - 1) + fibonacci(n - 2);
#             }

#             fibonacci: function integer(n: integer) {
#                 return func(n);
#             }"""
#         expect = "Error on line 2 col 32: =="
#         self.assertTrue(TestParser.test(input, expect, 257))

#     def test_complex_31(self):
#         input = """func: function void() {
#                 do {
#                     i = i + 1;
#                     if (i % 2 == 0) {
#                         continue;
#                     }
#                     if (i == 11) {
#                         break;
#                     }
#                     writeIntLn(i);
#                 } while (i < 20);
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 258))

#     def test_complex_33(self):
#         input = """func: function void() {
#                 for (i = 0, i < 10, 1) {
#                     for (j = 0, j < 10, 1) {
#                         if (i + j == 10) {
#                             continue;
#                         }
#                         writeInt(i);
#                         writeInt(j);
#                     }
#                 }
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 259))

#     def test_complex_34(self):
#         input = """func: function void() {
#                 i = 0;
#                 while (i < 10) {
#                     if (i % 2 == 0) {
#                         i = i + 2;
#                         continue;
#                     }
#                     writeIntLn(i);
#                     i = i + 1;
#                 }
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 260))

#     def test_complex_47(self):
#         input = """i: integer;
#             func: function void() {
#                 for (i = 0, i < 10, i + 1) {
#                     if (i % 2 == 0) {
#                         continue;
#                     }
#                     writeInt(i);
#                     if (i == 7) {
#                         break;
#                     }
#                 }
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 261))

#     def test_complex_48(self):
#         input = """a: integer;
#             func: function integer(x: integer) {
#                 a = x;
#                 while (a > 0) {
#                     a = a - 1;
#                     if (a == 5) {
#                         return a;
#                     }
#                 }
#                 return x;
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 262))

#     def test_complex_50(self):
#         input = """i, j: integer;
#             func: function void() {
#                 for (i = 1, j = 2, i < 10 && j < 20, i = i + 1, j = j + 2) {
#                     if (i % 2 == 0) {
#                         continue;
#                     }
#                     writeInt(i);
#                 }
#             }
#         """
#         expect = "Error on line 3 col 30: ="
#         self.assertTrue(TestParser.test(input, expect, 263))

#     def test_complex_51(self):
#         input = """a: integer;
#             func: function integer(x: integer) {
#                 a = x;
#                 do {
#                     a = a - 1;
#                     if (a == 5) {
#                         return a;
#                     }
#                 } while (a > 0);
#                 return x;
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 264))

#     def test_complex_27(self):
#         input = """func: function void() {
#                     for( i = 1, i < 10, 1)
#                         for (j = 1, j < 10, 1)
#                             if (i < j)
#                                 break;
#                             writeInt(i + j);
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 265))

#     def test_complex_28(self):
#         input = """func: function void() {
#                     i = 1;
#                     j = 1;
#                     while (i < 10)
#                         while (j < 10)
#                             if (i < j)
#                                 break;
#                             writeInt(i + j);
#                             j = j + 1;
#                         i = i + 1;
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 266))

#     def test_complex_31(self):
#         input = """a: array[5] of integer = {1, 2, 3, 4, 5};
#                 func: function integer(i: integer) {
#                     if ((i < 0) || (i >= 5))
#                         return -1;
#                     return a[i];
#                 }
#             """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 267))

#     def test_error_complex_31(self):
#         input = """a: array[5] of integer = {1, 2, 3, 4, 5};
#                 func: function integer(i: integer) {
#                     if (i < 0 || i >= 5)
#                         return -1;
#                     return a[i];
#                 }
#             """
#         expect = "Error on line 3 col 35: >="
#         self.assertTrue(TestParser.test(input, expect, 268))

#     def test_call_function_81(self):
#         input = """main:function void(){
#         a : integer;
#         a=10;
#         while (a<20)
#             writeln(a);
#             a=a+1;
#             if (a == 15)
#                 break;
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 269))

#     def test_error_call_function_81(self):
#         input = """main:function void(){
#         a : integer;
#         a=10;
#         while (a<20)
#             writeln(a);
#             a=a+1;
#             if (a = 15)
#                 break;
#         }
#         """
#         expect = "Error on line 7 col 18: ="
#         self.assertTrue(TestParser.test(input, expect, 270))

#     def test_call_function_82(self):
#         input = """main:function void(){
#         a : integer;
#         a=10;
#         while (a<20)
#             writeln(a);
#             a=a+1;
#             if (a == 15)
#                 continue;
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 271))

#     def test_call_function_83(self):
#         input = """main:function void(){
#         i:integer;
#         for(i=0,1,1)
#                 writeln(i);
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 272))

#     def test_eror_call_function_83(self):
#         input = """main:function void(){
#         i:integer;
#         for(i=0,,)
#                 writeln(i);
#         }
#         """
#         expect = "Error on line 3 col 16: ,"
#         self.assertTrue(TestParser.test(input, expect, 273))

#     def test_call_function_84(self):
#         input = """main:function void(){
#         i:integer;
#         for(i=10,i>0,i-1)
#                 writeln(i);
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 274))

#     def test_call_function_85(self):
#         input = """main:function void(){
#         if (true)
#             if (true)
#                 if (true)
#                     if (true)
#                         if (true)
#                             writeln("TRUE");
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 275))

#     def test_call_function_86(self):
#         input = """main:function void(){
#         if (true)
#             if (true)
#                 if (true)
#                     if (true)
#                         if (true)
#                             writeln("TRUE");
#                 else writeln("FALSE");
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 276))

#     def test_call_function_87(self):
#         input = """main:function void(){
#         i:integer;
#         for (i=0,i<0,i+3)
#                 writeln(i);
#                 if (i==5) break;
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 277))

#     def test_call_function_89(self):
#         input = """main:function void(){
#         a : integer;
#         a=5;
#         writeln(a % 2);
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 278))

#     def test_call_function_90(self):
#         input = """main:function void(){
#         a : integer;
#         a=5;
#         writeln(a / 2);
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 280))

#     def test_assign_2(self):
#         input = """func: function void() {
#                 x = y = z = 5;
#             }"""
#         expect = "Error on line 2 col 22: ="
#         self.assertTrue(TestParser.test(input, expect, 281))

#     def test_assign_3(self):
#         input = """func: function void() {
#                 x = y + z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 282))

#     def test_assign_4(self):
#         input = """func: function void() {
#                 x = y * z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 283))

#     def test_assign_5(self):
#         input = """func: function void() {
#                 x = y / z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 284))

#     def test_assign_6(self):
#         input = """func: function void() {
#                 x = y % z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 285))

#     def test_assign_7(self):
#         input = """func: function void() {
#                 x = y && z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 286))

#     def test_assign_8(self):
#         input = """func: function void() {
#                 x = y || z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 287))

#     def test_assign_9(self):
#         input = """func: function void() {
#                 x = !y;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 288))

#     def test_assign_10(self):
#         input = """func: function void() {
#                 x = y == z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 289))

#     def test_assign_11(self):
#         input = """func: function void() {
#                 x = y != z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 290))

#     def test_assign_12(self):
#         input = """func: function void() {
#                 x = y < z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 291))

#     def test_assign_13(self):
#         input = """func: function void() {
#                 x = y <= z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 292))

#     def test_assign_14(self):
#         input = """func: function void() {
#                 x = y > z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 293))

#     def test_assign_15(self):
#         input = """func: function void() {
#                 x = y >= z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 294))

#     def test_assign_16(self):
#         input = """func: function void() {
#                 x[0] = y;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 295))

#     def test_forstmt_1(self):
#         input = """func: function void() {
#                 for (i = 1, i < 10, i + 1) {
#                     writeInt(i);
#                 }
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 296))

#     def test_forstmt_2(self):
#         input = """func: function void() {
#                 for (i = 1, i < 10, i + 1) {
#                     if (i % 2 == 0) {
#                         writeString("even");
#                     } else {
#                         writeString("odd");
#                     }
#                 }
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 297))

#     def test_forstmt_3(self):
#         input = """func: function void() {
#                 for (i = 10, i >= 1, i - 1) {
#                     writeInt(i);
#                 }
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 298))

#     def test_forstmt_4(self):
#         input = """func: function void() {
#                 for (i = 1, i <= 10, i + 1) {
#                     if (i == 5) {
#                         break;
#                     }
#                     writeInt(i);
#                 }
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 299))
# ------------------------------------------------------------------------------------------------
# import unittest
# from TestUtils import TestParser


# class ParserSuite(unittest.TestCase):

#     def test_parser_200(self):
#         input = "var x, y: integer;"
#         expect = "Error on line 1 col 4: x"
#         self.assertTrue(TestParser.test(input, expect, 200))

#     def test_parser_201(self):
#         input = "foo: function integer (a: integer, b: float) inherit bar { return 1; }"
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 201))

#     def test_parser_202(self):
#         input = """x, y: integer;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 202))

#     def test_parser_203(self):
#         input = """foo: function integer (a: integer, b: float) {}"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 203))

#     def test_parser_204(self):
#         input = "foo: function () { return 0; }"
#         expect = "Error on line 1 col 14: ("
#         self.assertTrue(TestParser.test(input, expect, 204))

#     def test_parser_205(self):
#         input = """main {
#                             a = 1;
#                             b = 2.0;
#                             c = a + b;
#                         }"""
#         expect = "Error on line 1 col 5: {"
#         self.assertTrue(TestParser.test(input, expect, 205))

#     def test_parser_206(self):
#         input = """foo: function integer () {
#                             a = 5;
#                             b = 3 * 5;
#                             if (3 > 5) c = 123.123;
#                             if (true && false) {
#                                 d = a + b;
#                             } else {
#                                 d = a;
#                             }
#                             for (i = 1, i < 10, i + 1) {
#                                 writeInt(i);
#                             }
#                             while (a >= b) {
#                                 a = a - b;
#                             }
#                             do {
#                                 a = a + 1;
#                             } while (a < 100);
#                             break;
#                             continue;
#                             return a + b;
#                             foo(2 + x, 4.0 / y);
#                             go();
#                         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 206))

#     def test_parser_207(self):
#         input = """foo: function float (a: integer, b: float) inherit bar {
#                             a = 5;
#                             b = 3 * 5;
#                             if (3 > 5) c = 123.123;
#                             if( true && false) {d = a + b;} else {d = a;}
#                             for(i = 1, i < 10, i + 1) {writeInt(i);}
#                             while(a>= b) a = a - b;
#                             do {a = a + 1;} while (a < 100);
#                             break;
#                             continue;
#                             return a + b;
#                             foo(2 + x, 4.0/y);
#                             go();
#                         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 207))

#     def test_parser_208(self):
#         input = """
#             foo: function float (a: integer, b: float) inherit bar {
#                 a = 5;
#                 b = 3 * 5;
#                 if (3 > 5) c = 123.123;
#                 if (true && false) { d = a + b; } else { d = a; }
#                 for (i = 1, i < 10, i + 1) { writeInt(i); }
#                 while (a >= b) a = a - b;
#                 do { a = a + 1; } while (a < 100);
#                 break;
#                 continue;
#                 return a + b;
#                 foo(2 + x, 4.0 / y);
#                 go();
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 208))

#     def test_parser_209(self):
#         input = """foo: function float (a: integer, b: float) inherit bar {
#                             return a + b;
#                         }
#                         main: function integer () {
#                             x: integer;
#                             y: integer;
#                             z: integer;
#                             t: integer;
#                             u: integer;
#                             v: integer;
#                             x = 10;
#                             y = 20;
#                             z = x + y;
#                             t = z * 2;
#                             u = t / 4;
#                             v = u - 5;
#                             writeInt(v);

#                             return 0;
#                         }
#                         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 209))

#     def test_parser_210(self):
#         input = """a,b,c: integer = 10, 13, 15, 134;
#         foo: function float (a: integer, b: float) inherit bar {
#                             return a + b;
#                         }
#                         main: function integer () {
#                             return 0;
#                         }
#                         """
#         expect = "Error on line 1 col 27: ,"
#         self.assertTrue(TestParser.test(input, expect, 210))

#     def test_parser_211(self):
#         input = """a,b,c: integer = 10, 13, 15;
#         foo: function float (a: integer, b: float) inherit bar {
#             for(i = 123, i > 0, i - 1) {writeLn("haha");}
#             return a + b;
#         }
#         main: function integer () {
#             return 0;
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 211))

#     # Test if statement
#     def test_parser_212(self):
#         input = """func: function void() {
#                         if (a > b) {
#                             return a;
#                         } else {
#                             return b;
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 212))

#     def test_parser_213(self):
#         input = """func: function void() {
#                         if (a == 0) {
#                             print("a is zero");
#                         } else {
#                             print("a is not zero");
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 213))

#     def test_parser_214(self):
#         input = """func: function void() {
#                         if (a != b) {
#                             print("a and b are not equal");
#                         } else {
#                             print("a and b are equal");
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 214))

#     def test_parser_215(self):
#         input = """func: function void() {
#                         if (a >= b) {
#                             print("a is greater than or equal to b");
#                         } else {
#                             print("a is less than b");
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 215))

#     def test_parser_216(self):
#         input = """func: function void() {
#                         if (a <= b) {
#                             print("a is less than or equal to b");
#                         } else {
#                             print("a is greater than b");
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 216))

#     def test_parser_217(self):
#         input = """func: function void() {
#                         if (a > b) {
#                             print("a is greater than b");
#                         } else if (a < b) {
#                             print("a is less than b");
#                         } else {
#                             print("a and b are equal");
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 217))

#     def test_parser_218(self):
#         input = """func: function void() {
#                         if (a % 2 == 0) {
#                             print("a is even");
#                         } else {
#                             print("a is odd");
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 218))

#     def test_parser_219(self):
#         input = """func: function void() {
#                         if (a > 0) {
#                             print("a is positive");
#                         } else if (a < 0) {
#                             print("a is negative");
#                         } else {
#                             print("a is zero");
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 219))

#     def test_parser_220(self):
#         input = """func: function void() {
#                         if (x == 1) {
#                             y = 2;
#                         } else if (x == 2) {
#                             y = 4;
#                         } else if (x == 3) {
#                             y = 6;
#                         } else {
#                             y = 8;
#                         }
#                     }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 220))

#     def test_parser_221(self):
#         input = """main: function boolean () {
#                     if (true)
#                         print("Hello World");
#                     else
#                         print("Goodbye World");
#                 }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 221))

#     def test_parser_222(self):
#         input = """func: function void() {
#                     if (true) {
#                         print("Hello");
#                         print("World");
#                     }
#                     else
#                         print("Goodbye");
#                 }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 222))

#     def test_parser_223(self):
#         input = """func: function string() {
#                     if (true) {
#                         if (false)
#                             print("Nested");
#                         else
#                             print("If-else");
#                     }
#                     else
#                         print("Outer else");
#                 }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 223))

#     def test_parser_224(self):
#         input = """foo: function boolean (isOk: boolean) {
#                     if (true && false)
#                         print("AND condition");
#                     else
#                         print("ELSE");
#                 }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 224))

#     def test_parser_225(self):
#         input = """func: function float(out a: integer) {
#                     x = 5;
#                     if (x > 3)
#                         print("x is greater than 3");
#                     else
#                         print("x is less than or equal to 3");
#                 }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 225))

#     def test_parser_226(self):
#         input = """main: function void (a: boolean) {
#                     if (isPrime(7))
#                         print("7 is prime");
#                     else
#                         print("7 is not prime");
#                 }

#                 func: function boolean (n: integer)  {
#                     if (n <= 1)
#                         return false;
#                     for (i = 2, i <= n / 2, i + 1) {
#                         if (n % i == 0)
#                             return false;
#                     }
#                     return true;
#                 }
#                 """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 226))

#     # Test variable declaration
#     def test_parser_227(self):
#         input = """x: integer"""
#         expect = "Error on line 1 col 10: <EOF>"
#         self.assertTrue(TestParser.test(input, expect, 227))

#     def test_parser_228(self):
#         input = """a, b, c: integer = 1, 2, 3;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 228))

#     def test_parser_229(self):
#         input = """a: integer; b: boolean; c: string;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 229))

#     def test_parser_230(self):
#         input = """a_1: integer;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 230))

#     def test_parser_231(self):
#         input = """x: integer[];"""
#         expect = "Error on line 1 col 10: ["
#         self.assertTrue(TestParser.test(input, expect, 231))

#     # Test function declaration
#     def test_parser_232(self):
#         input = "foo: function integer (x: integer);"
#         expect = "Error on line 1 col 34: ;"
#         self.assertTrue(TestParser.test(input, expect, 232))

#     def test_parser_233(self):
#         input = "foo: function void (x: integer[][]) {}"
#         expect = "Error on line 1 col 30: ["
#         self.assertTrue(TestParser.test(input, expect, 233))

#     def test_parser_234(self):
#         input = """foo: function void (in: integer) {}"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 234))

#     def test_parser_235(self):
#         input = """foo: function void (x: integer) {}"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 235))

#     def test_parser_236(self):
#         input = """foo: function boolean (x) {}"""
#         expect = "Error on line 1 col 24: )"
#         self.assertTrue(TestParser.test(input, expect, 236))

#     # Test function call
#     def test_parser_237(self):
#         input = """main: function boolean (k: boolean) {
#             sad(k);
#             readInteger();
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 237))

#     def test_parser_238(self):
#         input = """main: function void () {
#                 preventDefault();
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 238))

#     def test_parser_239(self):
#         input = """main: function boolean () {
#                 a = True;
#                 printBoolean(a);
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 239))

#     def test_parser_240(self):
#         input = """main:function void(){
#             a : integer;
#             a = 10;
#             while (a < 20) {
#                 writeln(a);
#                 a = a+1;
#                 if(a == 15)
#                     break;
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 240))

#     def test_parser_241(self):
#         input = """main:function void(){
#             a : integer;
#             a = 10;
#             while (a < 20) {
#                 writeln(a);
#                 a = a+1;
#                 if(a == 15)
#                     continue;
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 241))

#     def test_parser_242(self):
#         input = """main:function void(){
#         i:integer;
#         for (i=0, i < 10, i + 2)
#             {
#                 writeln(i);
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 242))

#     def test_parser_243(self):
#         input = """main:function void(){
#         i:integer;
#         for (i=10, i > 0, i - 1)
#             {
#                 writeln(i);
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 243))

#     def test_parser_244(self):
#         input = """main:function void(){
#             if(true) {
#                 if(true) {
#                     if(true) {
#                         if(true) {
#                             writeBoolean(true);
#                         }
#                     }
#                 }
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 244))

#     def test_parser_245(self):
#         input = """main:function void(){
#             if(true) {
#                 if(true) {
#                     if(true) {
#                         if(true) {
#                             writeBoolean(true);
#                         }
#                     }
#                 }
#             } else {
#                 writeBoolean(false);
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 245))

#     def test_parser_246(self):
#         input = """main:function void(){
#             i:integer;
#             for (i=0, i < 10, i + 1) {
#                 writeln(i);
#                 if (i==5) break;
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 246))

#     def test_parser_247(self):
#         input = """main:function void(){
#             i:integer;
#             for (i=0, i < 10, i + 1) {
#                 writeln(i);
#                 if (i==5) continue;
#             }
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 247))

#     def test_parser_248(self):
#         input = """main:function void(){
#             a : integer;
#             a=5;
#             writeln(a % 2);
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 248))

#     def test_parser_249(self):
#         input = """main:function void(){
#             a : integer;
#             a=5;
#             writeln(a / 2);
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 249))

#     def test_parser_250(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 250))

#     def test_parser_251(self):
#         input = """outer: function void () {
#             x: integer = 10;
#             inner: function void() {
#                 y: integer = 20;
#                 print(x + y);
#             }
#             inner();
#         }"""
#         expect = "Error on line 3 col 19: function"
#         self.assertTrue(TestParser.test(input, expect, 251))

#     def test_parser_252(self):
#         input = """func: function void (a: integer, b: float, c: boolean) {
#             x: integer;
#             y: float = 3.14;
#             z: boolean = true;
#             if (c && b > 0) {
#                 x = a + y;
#             }
#             else {
#                 x = a - y;
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 252))

#     def test_parser_253(self):
#         input = """swap: function void (arr: array[5] of integer, i: integer, j: integer) {
#             temp: integer;
#             temp = arr[i];
#             arr[i] = arr[j];
#             arr[j] = temp;
#         }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 253))

#     def test_parser_2254(self):
#         input = """x: integer;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 254))

#     def test_parser_255(self):
#         input = """x: integer = 5;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 255))

#     def test_parser_256(self):
#         input = """x, y, z: integer = 1, 2, 3;"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 256))

#     def test_parser_257(self):
#         input = """x, y, z: integer = 1, 2, 3, 6, 3;"""
#         expect = "Error on line 1 col 26: ,"
#         self.assertTrue(TestParser.test(input, expect, 257))

#     def test_parser_258(self):
#         input = """foo: function integer (){ }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 258))

#     def test_parser_259(self):
#         input = """foo: function void (x: integer, y: float) { }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 259))

#     def test_parser_260(self):
#         input = """foo:function integer(x: integer, y: float) {
#                 z: integer;
#                 z = x + y;
#                 return z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 260))

#     def test_parser_261(self):
#         input = """ foo: function integer(x: integer){ }
#                     bar: function float(y: float){ }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 261))

#     def test_parser_262(self):
#         input = """foo: function integer(x: integer) {
#                 z: integer;
#                 z = x + 1;
#                 return z;
#             }
#             bar: function float(y: float) {
#                 z: float;
#                 z = y * 2.0;
#                 return z;
#             }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 262))

#     def test_parser_263(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3)
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 11 col 12: inc"
#         self.assertTrue(TestParser.test(input, expect, 263))

#     def test_parser_264(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta)
#             delta = delta / 4;
#         }"""
#         expect = "Error on line 12 col 12: delta"
#         self.assertTrue(TestParser.test(input, expect, 264))

#     def test_parser_265(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 4 col 12: else"
#         self.assertTrue(TestParser.test(input, expect, 265))

#     def test_parser_266(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         main: function void() {
#             foo();
#             bar();
#             baz();
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 266))

#     def test_parser_267(self):
#         input = """x: integer = 10; // This is x
#         y: integer = 20; // This is y
#         z: integer = 30; // This is z
#         main: function void() {
#             // This is a comment
#             foo(); // Call foo
#             bar(); // Call bar
#             baz(); // Call baz
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 267))

#     def test_parser_268(self):
#         input = """/* This is a block comment
#         This is a multiline comment */
#         x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         /* This is another comment */
#         main: function void() {
#             foo();
#             bar();
#             baz();
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 268))

#     def test_parser_269(self):
#         input = """/* This is a block comment
#         This is a multiline comment */
#         x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         /* This is another comment */ */
#         main: function void() {
#             foo();
#             bar();
#             baz();
#         }
#         foo: function void() {
#             x = y + z;
#         }
#         bar: function void() {
#             y = x + z;
#         }
#         baz: function void() {
#             z = x + y;
#         }"""
#         expect = "Error on line 6 col 38: *"
#         self.assertTrue(TestParser.test(input, expect, 269))

#     def test_parser_270(self):
#         input = """x: boolean = true;
#         y: boolean = false;
#         z: boolean = (x == y);
#         main: function void() {
#             if (x) {
#                 print("x is true");
#             } else {
#                 print("x is false");
#             }
#             if (y) {
#                 print("y is true");
#             } else {
#                 print("y is false");
#             }
#             if (z) {
#                 print("z is true");
#             } else {
#                 print("z is false");
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 270))

#     def test_parser_271(self):
#         input = """x: string = "Hello";
#         y: string = "World";
#         z: string = x + y;
#         main: function void() {
#             print(z);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 271))

#     def test_parser_272(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         main: function void() {
#             if (x > y) {
#                 print("x is greater than y");
#             } else {
#                 print("x is less than or equal to y");
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 272))

#     def test_parser_273(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 9 col 12: ("
#         self.assertTrue(TestParser.test(input, expect, 273))

#     def test_parser_274(self):
#         input = """x integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 1 col 2: integer"
#         self.assertTrue(TestParser.test(input, expect, 274))

#     def test_parser_275(self):
#         input = """x: integer = 65;
#         fact: function integer (n integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 2 col 34: integer"
#         self.assertTrue(TestParser.test(input, expect, 275))

#     def test_parser_276(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1);
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x))
#         }"""
#         expect = "Error on line 12 col 27: )"
#         self.assertTrue(TestParser.test(input, expect, 276))

#     def test_parser_277(self):
#         input = """x: integer = 65;
#         fact: function integer (n: integer) {
#             if (n == 0) return 1;
#             else return n * fact(n - 1)
#         }
#         inc: function void(out n: integer, delta: integer) {
#             n = n + delta;
#         }
#         main: function void() {
#             delta: integer = fact(3);
#             inc(x, delta);
#             printInteger(x);
#         }"""
#         expect = "Error on line 5 col 8: }"
#         self.assertTrue(TestParser.test(input, expect, 277))

#     def test_parser_278(self):
#         input = """max:function integer(a: integer, b:integer, c:integer) {
#             if (a > b) {
#                 if (a > c) {
#                     return a;
#                 } else {
#                     return c;
#                 }
#             } else {
#                 if (b > c) {
#                     return b;
#                 } else {
#                     return c;
#                 }
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 278))

#     def test_parser_279(self):
#         input = """printMultiples: function void (n: integer) {
#         for (i = 1, i <= 10, i + 1) {
#         if (i * n > 100) {
#             break;
#         }
#          print(i * n);
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 279))

#     def test_parser_280(self):
#         input = """printOddNumbers:function void(n: integer) {
#             i = 1;
#             while (i <= n) {
#                 if (i % 2 == 0) {
#                     i = i + 1;
#                     continue;
#                 }
#                 print(i);
#                 i = i + 1;
#             }
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 280))

#     def test_parser_281(self):
#         input = """sumArray:function integer(arr: array[3] of integer, n: integer) {
#         sum = 0;
#             for (i = 0, i < n,i + 1) {
#         sum = sum + arr[i];
#             }
#             return sum;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 281))

#     def test_parser_282(self):
#         input = """isEven:function boolean(n: integer) {
#             return (n % 2 == 0) && (n > 0);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 282))

#     def test_parser_283(self):
#         input = """swap: function void(a: integer,  b:integer) {
#             temp = a;
#             a = b;
#             b = temp;
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 283))

#     def test_parser_284(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         foo: function integer (a: integer, b: integer, c: integer) {
#             return a + b * c;
#         }
#         bar: function integer (n: integer) {
#             return foo(x, y, z) + n;
#         }
#         main: function void() {
#             printIntLn(bar(5));
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 284))

#     def test_parser_285(self):
#         input = """foo: function boolean (a: boolean, b: boolean) {
#             return (a || b) && (! a || b);
#         }
#         bar: function boolean (n: integer) {
#             return (n > 0) && (n < 10);
#         }
#         main: function void() {
#             printBoolLn(foo(true, false) || bar(5));
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 285))

#     def test_parser_286(self):
#         input = """x: integer = 5;
#         y: integer = 10;
#         foo: function integer (a: integer, b: integer) {
#             return a + b * (a - b);
#         }
#         bar: function boolean (n: integer) {
#             return (n > 0) && (n < 10);
#         }
#         main: function void() {
#             z: integer = foo(x + y, y - x) * 2 - 5;
#             printIntLn(z);
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 286))

#     def test_parser_287(self):
#         input = """x: integer = 10;
#         y: integer = 20;
#         z: integer = 30;
#         foo: function integer (a: integer, b: integer) {
#             if (a > b) return a;
#             else return b;
#         }
#         bar: function boolean (n: integer) {
#             return (n >= x) && (n <= z);
#         }
#         main: function void() {
#             if (bar(y)) print("y is in range");
#             else print("y is out of range");
#         }"""
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 287))

#     def test_parser_288(self):
#         input = """x: integer = 4;
#         while (x <= 10) {
#             sum = sum + x * 2;
#             x = x + 1;
#         }
#         printIntLn(sum);
#         """
#         expect = "Error on line 2 col 8: while"
#         self.assertTrue(TestParser.test(input, expect, 288))

#     def test_parser_289(self):
#         input = """
#             foo: function float (a: integer, b: float) inherit bar {
#                 a = 5;
#                 b = 3 * 5;
#                 if (3 > 5) c = 123.123;
#                 if( true && false) {d = a + b;} else {d = a;}
#                 for(i = 1, i < 10, i + 1) {writeInt(i);}
#                 while(a>= b) a = a - b;
#                 do {a = a + 1;} while (a < 100);
#                 return a + b;
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 289))

#     def test_parser_290(self):
#         input = """foo: function (a: integer, b: float) inherit bar { return 1; }"""
#         expect = "Error on line 1 col 14: ("
#         self.assertTrue(TestParser.test(input, expect, 290))

#     def test_parser_291(self):
#         input = """
#         x, y: integer;
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 291))

#     def test_parser_292(self):
#         input = """foo: function float(a: integer, b: float) inherit bar {
#                         a = 5;
#                         b = 3 * 5;
#                         if (3 > 5) c = 123.123;
#                         if( true && false) {d = a + b;} else {d = a;}
#                         for(i = 1, i < 10, i + 1) {
#                             writeInt(i);
#                             if (i == 5) break;
#                         }
#                         while(a >= b) {
#                             a = a - b;
#                             if (b == 0) {
#                                 continue;
#                             }
#                         }
#                         do {
#                             a = a + 1;
#                         } while (a < 100);
#                         return a + b;
#                     }
#                     x: integer = 5;
#                     y: integer = 10;
#                     z: float = 3.14159;
#                     s: string = "This is a string with an escaped newline character: \\n";
#                     """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 292))

#     def test_parser_293(self):
#         input = """
#             foo: function integer(a: integer, b: float) {
#                 if (a > b) return a;
#                 else return cc(b);
#             }
#             main: function void () {
#                 x: integer;
#                 y: float;
#                 x = 10;
#                 y = 20.5;
#                 writeInt(foo(x, y));
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 293))

#     def test_parser_294(self):
#         input = """
#             foo: function integer(a: integer, b: float) {
#                 if (a > b) return a;
#                 else return int(b);
#             }
#             bar: function integer(a: integer, b: float) inherit foo {
#                 return foo(a, b) + 1;
#             }
#             main: function void() {
#                 x: integer;
#                 y: float;
#                 x = 10;
#                 y = 20.5;
#                 writeInt(bar(x, y));
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 294))

#     def test_parser_295(self):
#         input = """
#             a: integer;
#             b: float;
#             c: boolean;
#             d: string;
#             main: function integer () {
#                 a = 1;
#                 b = 2.0;
#                 c = true;
#                 d = "hello world";
#                 writeIntLn(a);
#                 writeFloatLn(b);
#                 writeBoolLn(c);
#                 writeStringLn(d);
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 295))

#     def test_parser_296(self):
#         input = """
#             main: function void () inherit A {
#                 x: integer;
#                 y: float;
#                 z: integer;
#                 i: integer;
#                 x = 5;
#                 y = 2.5;
#                 z = x + y;
#                 for (i = 1, i < 10, i + 1) {
#                     writeIntLn(i);
#                 }
#                 if (z > 10) {
#                     writeStringLn("z is greater than 10");
#                 } else {
#                     writeStringLn("z is less than or equal to 10");
#                 }
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 296))

#     def test_parser_297(self):
#         input = """
#             foo: function integer(a: integer, b: integer) {
#                 if (a == b) return a;
#                 else return foo(a + 1, b);
#             }
#             main: function void() {
#                 x: integer;
#                 x = foo(1, 5);
#                 writeIntLn(x);
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 297))

#     def test_parser_298(self):
#         input = """foo: function integer(a: integer, b: float) inherit bar {
#                 a = 5;
#                 b = 3 * 5;
#                 if (3 > 5) c = 123.123;
#                 if( true && false) {d = a + b;} else {d = a;}
#                 for(i = 1, i < 10, i + 1) {writeInt(i);}
#                 while(a>= b) a = a - b;
#                 do {a = a + 1;} while (a < 100);
#                 break;
#                 continue;
#                 return a + b;
#                 foo(2 + x, 4.0/y);
#                 go();
#             }
#             main: function void() {
#                 a = "this is a string";
#                 b = "this is also a string";
#                 c = "string with escape: \\n";
#                 writeInt(10);
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 298))

#     def test_parser_299(self):
#         input = """
#             foo: function integer (x: integer) {
#                 if (x > 0) {
#                     return x * foo(x - 1);
#                 }
#                 return 1;
#             }
#             main: function string () {
#                 writeInt(foo(5));
#             }
#         """
#         expect = "successful"
#         self.assertTrue(TestParser.test(input, expect, 299))
# -------------------------------------------


import unittest
from TestUtils import TestParser


class ParserSuite(unittest.TestCase):

    def test_201(self):
        input = """
            x,y,z: integer = 3, 4, 6;
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 201))

    def test_202(self):
        input = """
        x: integer = 65;
        fact: function integer (n: integer) {
            if (n == 0) return 1;
            else return n * fact(n - 1);
        }
        inc: function void(out n: integer, delta: integer) {
            n = n + delta;
        }
        main: function void() {
            delta: integer = fact(3);
            inc(x, delta);
            printInteger(x);
        }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 202))

    def test_203(self):
        input = """
            a: integer = 65;
            main: function void() {}
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 203))

    def test_204(self):
        input = """
            a: integer = 65, 66;
            main: function void() {}
        """
        expect = "Error on line 2 col 27: ,"
        self.assertTrue(TestParser.test(input, expect, 204))

    def test_205(self):
        input = """
            a,b: integer = 65;
            main: function void() {}
        """
        expect = "Error on line 2 col 29: ;"
        self.assertTrue(TestParser.test(input, expect, 205))

    def test_206(self):
        input = """
            inc: function void(out n: integer, delta: integer) {
            n = n + delta;
        }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 206))

    def test_207(self):
        input = """
            main: function void() {
            delta: integer = fact(3);
            inc(x, delta);
            printInteger(x);
        }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 207))

    def test_208(self):
        input = """
            fact: function integer (n: integer) {
            if (n == 0) return 1;
            else return n * fact(n - 1);
        }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 208))

    def test_209(self):
        input = """
            x,y,z: integer = 3+2, 4+double(2,3), 6*square(1,2);
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 209))

    def test_210(self):
        input = """
            a:array [2] of integer;
            b:function array [2] of integer(){return a;}
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 210))

    def test_211(self):
        input = """
            a:array [2] of integer;
            b:function array [2] of integer(){
                if(a[0]!=0) a[0]=0;
                else a[1]=0;
                return a;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 211))

    def test_212(self):
        input = """
            a:array [2,3] of integer;
            initArray:function array [2,3] of integer(){
                k:integer=1;
                for(i=1,i<=1,i+1)
                    for(j=1,j<=2,j+1)
                    {
                        a[i,j]=k;
                        k=k+1;
                    }
                return a;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 212))

    def test_213(self):
        input = """
            test: function integer()
            {
                i:integer=1;
                do
                {
                    r, s: integer;
                    r = 2.0;
                    a, b: array [5] of integer;
                    s = r * r * myPI;
                    a[0] = s;
                    i=i+1;
                }
                while(1<10);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 213))

    def test_214(self):
        input = """
            test: function integer()
            {
                i:integer=1;
                do
                {
                    r, s: integer;
                    i=i+1;
                }
                while(i<10);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 214))

    def test_215(self):
        input = """
            test: function integer()
            {
                i:integer=1;
                do
                {
                    r, s: integer;
                    r = 2.0;
                    a, b: array [5] of integer;
                    i=i+1;
                }
                while(i<10);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 215))

    def test_216(self):
        input = """
            test: function integer()
            {
                i:integer=1;
                while(i<10)
                {
                    r, s: integer;
                    r = 2.0;
                    a, b: array [5] of integer;
                    s = r * r * myPI;
                    i=i+1;
                }
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 216))

    def test_217(self):
        input = """
            main:function void()
            {
                readInteger();   
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 217))

    def test_218(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                readInteger();
                printInteger(anArg);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 218))

    def test_219(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                anArg1:float=1;
                readInteger();
                printInteger(anArg);
                readFloat();
                writeFloat(arArg1);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 219))

    def test_220(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                readInteger();
                printInteger(anArg);
                readFloat();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 220))

    def test_221(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                anArg1:float=1;
                readInteger();
                printInteger(anArg);
                readFloat();
                writeFloat(arArg1);
                readBoolean();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 221))

    def test_222(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                anArg1:float=1;
                anArg2:boolean=true;
                readInteger();
                printInteger(anArg);
                readFloat();
                writeFloat(arArg1);
                readBoolean();
                printBoolean(anArg2);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 222))

    def test_223(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                anArg1:float=1;
                anArg2:boolean=true;
                readInteger();
                printInteger(anArg);
                readFloat();
                writeFloat(arArg1);
                readBoolean();
                printBoolean(anArg2);
                readString();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 223))

    def test_224(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                anArg1:float=1;
                anArg2:boolean=true;
                anArg3:string="dinhquamon";
                readInteger();
                printInteger(anArg);
                readFloat();
                writeFloat(arArg1);
                readBoolean();
                printBoolean(anArg2);
                readString();
                printString(anArg3);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 224))

    def test_225(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                anArg1:float=1;
                anArg2:boolean=true;
                anArg3:string="dinhquamon";
                readInteger();
                printInteger(anArg);
                readFloat();
                writeFloat(arArg1);
                readBoolean();
                printBoolean(anArg2);
                readString();
                printString(anArg3);
                super(1,2,3);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 225))

    def test_226(self):
        input = """
            main:function void()
            {
                anArg:integer=1;
                anArg1:float=1;
                anArg2:boolean=true;
                anArg3:string="dinhquamon";
                readInteger();
                printInteger(anArg);
                readFloat();
                writeFloat(arArg1);
                readBoolean();
                printBoolean(anArg2);
                readString();
                printString(anArg3);
                super(1,2,3);
                preventDefault();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 226))

    def test_227(self):
        input = """
            main:function void()
            {
                readInteger();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 227))

    # def test_228(self):
    #     input = """
    #         main:function void()
    #         {
    #             readInteger(1);
    #         }
    #     """
    #     expect = "Error on line 4 col 28: 1"
    #     self.assertTrue(TestParser.test(input, expect, 228))

    # def test_229(self):
    #     input = """
    #         main:function void()
    #         {
    #             readInteger(1,2);
    #         }
    #     """
    #     expect = "Error on line 4 col 28: 1"
    #     self.assertTrue(TestParser.test(input, expect, 229))

    # def test_230(self):
    #     input = """
    #         main:function void()
    #         {
    #             printInteger();
    #         }
    #     """
    #     expect = "Error on line 4 col 29: )"
    #     self.assertTrue(TestParser.test(input, expect, 230))

    def test_231(self):
        input = """
            main:function void()
            {
                printInteger(1);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 231))

    # def test_232(self):
    #     input = """
    #         main:function void()
    #         {
    #             printInteger(1,2);
    #         }
    #     """
    #     expect = "Error on line 4 col 30: ,"
    #     self.assertTrue(TestParser.test(input, expect, 232))

    def test_233(self):
        input = """
            main:function void()
            {
                readFloat();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 233))

    # def test_234(self):
    #     input = """
    #         main:function void()
    #         {
    #             readFloat(1.5);
    #         }
    #     """
    #     expect = "Error on line 4 col 26: 1.5"
    #     self.assertTrue(TestParser.test(input, expect, 234))

    # def test_235(self):
    #     input = """
    #         main:function void()
    #         {
    #             readFloat(1e2,2.5);
    #         }
    #     """
    #     expect = "Error on line 4 col 26: 1e2"
    #     self.assertTrue(TestParser.test(input, expect, 235))

    # def test_236(self):
    #     input = """
    #         main:function void()
    #         {
    #             writeFloat();
    #         }
    #     """
    #     expect = "Error on line 4 col 27: )"
    #     self.assertTrue(TestParser.test(input, expect, 236))

    def test_237(self):
        input = """
            main:function void()
            {
                writeFloat(1.5);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 237))

    # def test_238(self):
    #     input = """
    #         main:function void()
    #         {
    #             writeFloat(1.5,2e2);
    #         }
    #     """
    #     expect = "Error on line 4 col 30: ,"
    #     self.assertTrue(TestParser.test(input, expect, 238))

    # def test_239(self):
    #     input = """
    #         main:function void()
    #         {
    #             readBoolean();
    #         }
    #     """
    #     expect = "successful"
    #     self.assertTrue(TestParser.test(input, expect, 239))

    # def test_240(self):
    #     input = """
    #         main:function void()
    #         {
    #             readBoolean(1);
    #         }
    #     """
    #     expect = "Error on line 4 col 28: 1"
    #     self.assertTrue(TestParser.test(input, expect, 240))

    # def test_241(self):
    #     input = """
    #         main:function void()
    #         {
    #             readBoolean(1,2);
    #         }
    #     """
    #     expect = "Error on line 4 col 28: 1"
    #     self.assertTrue(TestParser.test(input, expect, 241))

    # def test_242(self):
    #     input = """
    #         main:function void()
    #         {
    #             printBoolean();
    #         }
    #     """
    #     expect = "Error on line 4 col 29: )"
    #     self.assertTrue(TestParser.test(input, expect, 242))

    def test_243(self):
        input = """
            main:function void()
            {
                printBoolean(true);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 243))

    # def test_244(self):
    #     input = """
    #         main:function void()
    #         {
    #             printBoolean(true,false);
    #         }
    #     """
    #     expect = "Error on line 4 col 33: ,"
    #     self.assertTrue(TestParser.test(input, expect, 244))

    def test_245(self):
        input = """
            main:function void()
            {
                readString();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 245))

    # def test_246(self):
    #     input = """
    #         main:function void()
    #         {
    #             readString("string");
    #         }
    #     """
    #     expect = "Error on line 4 col 27: string"
    #     self.assertTrue(TestParser.test(input, expect, 246))

    # def test_247(self):
    #     input = """
    #         main:function void()
    #         {
    #             readString("string","string");
    #         }
    #     """
    #     expect = "Error on line 4 col 27: string"
    #     self.assertTrue(TestParser.test(input, expect, 247))

    # def test_248(self):
    #     input = """
    #         main:function void()
    #         {
    #             printString();
    #         }
    #     """
    #     expect = "Error on line 4 col 28: )"
    #     self.assertTrue(TestParser.test(input, expect, 248))

    def test_249(self):
        input = """
            main:function void()
            {
                printString("string");
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 249))

    # def test_250(self):
    #     input = """
    #         main:function void()
    #         {
    #             printString("string","string");
    #         }
    #     """
    #     expect = "Error on line 4 col 36: ,"
    #     self.assertTrue(TestParser.test(input, expect, 250))

    def test_251(self):
        input = """
            main:function void()
            {
                super();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 251))

    def test_252(self):
        input = """
            main:function void()
            {
                super("string");
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 252))

    def test_253(self):
        input = """
            main:function void()
            {
                super("string",1);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 253))

    def test_254(self):
        input = """
            main:function void()
            {
                super("string",2,3+4,a[1]);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 254))

    def test_255(self):
        input = """
            main:function void()
            {
                preventDefault();
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 255))

    # def test_256(self):
    #     input = """
    #         main:function void()
    #         {
    #             preventDefault(1);
    #         }
    #     """
    #     expect = "Error on line 4 col 31: 1"
    #     self.assertTrue(TestParser.test(input, expect, 256))

    # def test_257(self):
    #     input = """
    #         main:function void()
    #         {
    #             preventDefault(2,1);
    #         }
    #     """
    #     expect = "Error on line 4 col 31: 2"
    #     self.assertTrue(TestParser.test(input, expect, 257))

    """ test exp"""

    def test_258(self):
        input = """
            main:function void()
            {
                a:integer=1+2*3/4;
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 258))

    def test_259(self):
        input = """
            main:function void()
            {
                a:string="dinh"::"dinh"=="dinh";
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 259))

    def test_260(self):
        input = """
            main:function void()
            {
                a:boolean=1==1!=1;
                return;
            }
        """
        expect = "Error on line 4 col 30: !="
        self.assertTrue(TestParser.test(input, expect, 260))

    def test_261(self):
        input = """
            main:function void()
            {
                a:boolean=1==1&&1;
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 261))

    def test_262(self):
        input = """
            main:function void()
            {
                a:boolean= (1!=1) || (1==1);
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 262))

    def test_263(self):
        input = """
            main:function void()
            {
                a:float=1+1.5-2_0e3;
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 263))

    def test_264(self):
        input = """
            x:boolean=!!!true;
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 264))

    def test_265(self):
        input = """
            x,y,z: integer = --3, -4, ---6;
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 265))

    def test_266(self):
        input = """
            x:array[2,3] of integer;
            main:function integer(){ return a[2-2,2-1];}
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 266))

    def test_267(self):
        input = """
            main:function integer(){ return 1[2-2,2-1];}
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 267))

    def test_268(self):
        input = """
            main:function integer(){ return 1.5[2-2,2-1];}
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 268))

    def test_269(self):
        input = """
            main:function integer(){ return "dinh"[2-2,2-1];}
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 269))

    def test_270(self):
        input = """
            x:integer=10;
            i:integer=2;
            init:function array[2] of integer()
            {
                result:array [10] of integer;
                for(j=0,j<x,j+1)
                {
                    a[j]=i;
                    i=i*i;
                }
                return a;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 270))

    def test_271(self):
        input = """
            x:integer=10;
            i:integer=2;
            init:function array[2] of integer()
            {
                result:array [10] of integer;
                j:integer=0;
                while(j<x)
                {
                    a[j]=i;
                    i=i*i;
                    j=j+1;
                }
                return a;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 271))

    def test_272(self):
        input = """
            x:integer=10;
            i:integer=2;
            init:function array[2] of integer()
            {
                result:array [10] of integer;
                j:integer=0;
                do
                {
                    a[j]=i;
                    i=i*i;
                    j=j+1;
                }
                while(j<x);
                return a;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 272))

    def test_273(self):
        input = """
            fact:function integer(n:integer)
            {
                if(n==0)return 1;
                if((n==1) || (n==2)) return 1;
                return fact(n-1)+fact(n-2);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 273))

    def test_274(self):
        input = """
            fact:function integer(n:integer)
            {
                if((n==0)||(n==1)||(n==2))return 1;
                result:integer=1;
                a:integer=1;
                b:integer=1;
                while(n>2)
                {
                    result=a+b;
                    a=b;
                    b=result;
                    n=n-1;
                }
                return result;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 274))

    def test_275(self):
        input = """
            main:function void(){
                printString("Hay nhap tuoi cua ban");
                a:integer=readInteger();
                printString("So tuoi cua ban la: ");
                printInteger(a);
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 275))

    def test_276(self):
        input = """
            main:function void(){
                printString("Hay nhap tuoi cua ban");
                a:float=readFloat();
                printString("So tuoi cua ban la: ");
                writeFloat(a);
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 276))

    def test_277(self):
        input = """
            main:function void(){
                printString("Hay nhap dieu uoc cua ban");
                a:float=readString();
                printString("Dieu uoc cua ban da duoc thuc hien");
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 277))

    def test_278(self):
        input = """
            main:function void(){
                while(true)
                {
                    printString("May cua ban da bi hack");
                }
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 278))

    def test_279(self):
        input = """
            main:function void(){
                while(true)
                {
                    printString("May cua ban da bi hack");
                }
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 279))

    def test_280(self):
        input = """
            main:function void(){
                do
                {
                    printString("May cua ban da bi hack");
                }
                while(true);
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 280))

    def test_281(self):
        input = """
            main:function void(){
                for(i=1,i>0,i+1)
                    printString("May cua ban da bi hack");
                return;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 281))

    def test_282(self):
        input = """
            main:function integer(){
                x,y,z:float=1.5,2e4,.e3;
                a:integer=5;
                return a-x;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 282))

    def test_283(self):
        input = """
            main:function integer(){
                x,y,z:float=1.5,2e4,.e3;
                a:integer=5;
                return a/0;
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 283))

    def test_284(self):
        input = """
            main:function integer() inherit b{
                x,y,z:float=1.5,2e4,.e3;
                a:integer=5;
                return super(1,2);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 284))

    def test_285(self):
        input = """
            main:function integer(inherit a:integer) inherit b{
                x,y,z:float=1.5,2e4,.e3;
                return super(1,2);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 285))

    def test_286(self):
        input = """
            main:function integer(inherit a:integer) inherit super_B{
                x,y,z:float=1.5,2e4,.e3;
                return super(x,y*z);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 286))

    def test_287(self):
        input = """
            main:function integer(inherit a:integer) inherit super_B{
                x,y,z:float=1.5,2e4,.e3;
                return super(x/y,y/z);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 287))

    def test_288(self):
        input = """
            Add:function integer(a:float, b:float)
            {
                return a+b;
            }
            main: function integer()inherit Add{
                return super(3.5,2e3);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 288))

    def test_289(self):
        input = """
            Sub:function integer(a:float, b:float)
            {
                return a-b;
            }
            main: function float(a:float,b:float)inherit Sub{
                return super(a,b);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 289))

    def test_290(self):
        input = """
            Div:function integer(a:float, b:float)
            {
                return a/b;
            }
            main: function float(a:float,b:float)inherit Div{
                return super(a,b);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 290))

    def test_291(self):
        input = """
            x,y,z: integer = 3, 4, 6;
            Div:function integer(a:float, b:float)
            {
                return a/b;
            }
            Sub:function integer(a:float, b:float)
            {
                return a-b;
            }
            main: function float(a:float,b:float)inherit Div{
                return super(a,b);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 291))

    def test_292(self):
        input = """
            x,y,z: integer = 3, 4, 6;
            Div:function integer(a:float, b:float)
            {
                return a/b;
            }
            Sub:function integer(a:float, b:float)
            {
                return a-b;
            }
            main:function integer(inherit a:integer) inherit b{
                x,y,z:float=1.5,2e4,.e3;
                return super(1,2);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 292))

    def test_293(self):
        input = """
            square:function integer(a:integer)
            {
                return a*a;
            }
            main:function void()
            {
                a:integer=square(5);//Binh phuong cua 5
                printInteger(a);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 293))

    def test_294(self):
        input = """
            x,y,z: integer = 3, 4, 6;
            /*
                Comment Multi;
            */
            // Comment
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 294))

    def test_295(self):
        input = """
           a,b,c:float=2.5,2e3,.e10;
            /*
                Comment Multi;
            */
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 295))

    def test_296(self):
        input = """
            x,y,z: integer = 3, 4, 6;
            /*
            Div:function integer(a:float, b:float)
            {
                return a/b;
            }
            Sub:function integer(a:float, b:float)
            {
                return a-b;
            }*/
            main:function integer(inherit a:integer) inherit b{
                a:integer=4;//Comment comment
                x,y,z:float=1.5,2e4,.e3;
                return super(1,2);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 296))

    def test_297(self):
        input = """
                a : boolean = true;
                add: function void(i: float) {
                    return i;
                }
                inc: function void(out n: integer, inherit delta: integer, inherit out hallo: auto) inherit add{
                    n = n + delta + hallo;
                    n = n - delta - hallo;
                    n = n * delta * hallo;
                    /* multiple
                        line
                        comment
                    */
                    n = n / delta / hallo;
                    n = true;
                    n = n % 1 + hallo - 1+2;
                    n = n && delta && hallo;
                    n = n || delta || hallo;
                    n = n :: n;
                    n = n + add(delta);
                    n = a[1, a[1, a[1,2]]]; // n[1,2] = 2 => n = a[1,2];
                    return n;
                }
                """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 297))

    def test_298(self):
        input = """
        a : boolean = true;
        inc: function void(out n: integer, inherit delta: integer, inherit out hallo: auto) {
            n = n + delta;
        }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 298))

    def test_299(self):
        input = """
                x: integer = 323;
                n: integer = 123;
                s1 : string = "dinh";
                s2 : string = "qua";
                s3 : string = "mon";
                inc: function void(out n: integer, delta: integer) {
                    n = n + delta;
                }
                main: function void() {
                    uranus : string = s1 :: s2;
                    if (n != 65) return;
                }
                """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 299))

    def test_300(self):
        input = """
            x,y,z: integer = 3, 4, 6;
            fact:function integer(n:integer)
            {
                if((n==0)||(n==1)||(n==2))return 1;
                result:integer=1;
                a:integer=1;
                b:integer=1;
                while(n>2)
                {
                    result=a+b;
                    a=b;
                    b=result;
                    n=n-1;
                }
                return result;
            }
            fact: function integer (n: integer) {
                if (n == 0) return 1;
                else return n * fact(n - 1);
            }
            inc: function void(out n: integer, delta: integer) {
                n = n + delta;
            }
            main: function void() {
                delta: integer = fact(3);
                inc(x, delta);
                printInteger(x);
            }
        """
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 300))
